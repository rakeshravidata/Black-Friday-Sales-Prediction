df$date = NULL
df$id<-NULL
df$lat<-NULL
df$long<-NULL
df$sqft_living<-NULL
df$year<-as.factor(df$year)
df$month<-as.factor(df$month)
df$condition<-as.factor(df$condition)
df$grade<-as.factor(df$grade)
df$yr_renovated<-as.factor(df$yr_renovated)
df$yr_built<-as.factor(df$yr_built)
df$waterfront<-as.factor(df$waterfront)
df$zipcode<-as.factor(df$zipcode)
df$bedrooms<-as.factor(df$bedrooms)
data.lm <- lm(log(price)~., df)
summary(data.lm)
data.lm <- lm(price~., df)
summary(data.lm)
cook <- cooks.distance(data.lm)
# The associated cutoff value fori dentifying an
# influential observation is
cut.inf <- 1
#displaying influential points
df[which(cooks.distance(data.lm) > 0.1),]
influential <- as.numeric(names(cook)[(cook > 4*mean(cook, na.rm=T))])  # influential row numbers
nrow(df[influential, ])
df.after.cd = df[-influential, ]
plot(cook, pch="*", cex=2, main="Influential Obs by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cook, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cook)+1, y=cook, labels=ifelse(cook>4*mean(cook, na.rm=T),names(cook),""), col="red")  # add labels
nrow(df[influential, ])
influential
df.after.cd = df[-influential[!is.na(influential)], ]
data.lm.after.cd<-lm(price~.,data=df.after.cd)
summary(data.lm.after.cd)
data.lm.after.cd
summary(data.lm.after.cd)
# Test the significance of regression
price <- df.after.cd$price
data.lm.after.cd<-lm(log(price)~.,data=df.after.cd)
summary(data.lm.after.cd)
data.lm.after.cd<-lm(price~.,data=df.after.cd)
summary(data.lm.after.cd)
data.lm.after.cd<-lm(log(price)~.,data=df.after.cd)
summary(data.lm.after.cd)
# Test the significance of regression
price <- df.after.cd$price
price.fit <- fitted(data.lm.after.cd)
SS.Res <- sum((price - price.fit)^2)
SS.R <- sum((price.fit - mean(price))^2)
n <- nrow(data.after.cd)
n <- nrow(df.after.cd)
k <- ncol(df.after.cd) - 1
F <- (SS.R / 10) / (SS.Res / (n - k - 1))
# F statistics
F
# [1] 2079.985
pf <- pf(abs(F), df1=k, df2=n-k-1, lower.tail=FALSE)
# P-value of the F statistics
pf
# Test on genenral linear hypothesis
MS.Res <- SS.Res / (n - k - 1)
colnames <- colnames(df.after.cd)[-1]
# Generate Partial F-test on each of the variables
results <- vector("list", length(colnames))
names(results) <- colnames
for(i in 1:k){
var <- colnames[i]
data.lm.pr <- lm(price~., select(df.after.cd, -var))
price.fit.pr <- fitted(data.lm.pr)
SS.R.pr <- sum((price.fit.pr - mean(price))^2)
F0 <- (SS.R - SS.R.pr) / MS.Res
pf <- pf(abs(F0), df1=1, df2=n-k-1, lower.tail=FALSE)
result <- c(F0, pf)
names(result) <- c("F0", "p-value")
results[[var]] <- result
}
results
results
# Check the model adequecy
# Residuals
e <- resid(data.lm.after.cd)
# Standardized Residuals
d <- e / sqrt(MS.Res)
# Studentized residuals
X.mat <- as.matrix(select(data.price, -price))
X.mat <- cbind(rep(1,n), X.mat)
H.mat <- X.mat %*% solve(t(X.mat) %*% X.mat) %*% t(X.mat)
h.val <- diag(H.mat)
r <- e / sqrt(MS.Res * (1 - h.val))
# Press residuals
e.press <- e / (1 - h.val)
# Studentized residuals
X.mat <- as.matrix(select(df.after.cd, -price))
X.mat <- cbind(rep(1,n), X.mat)
H.mat <- X.mat %*% solve(t(X.mat) %*% X.mat) %*% t(X.mat)
h.val <- diag(H.mat)
# Studentized residuals
X.mat <- as.matrix(select(df.after.cd, -price))
X.mat
X.mat <- cbind(rep(1,n), X.mat)
X.mat
H.mat <- X.mat %*% solve(t(X.mat) %*% X.mat) %*% t(X.mat)
t(X.mat) %*% X.mat
hatvalues(data.lm.after.cd)
h.val<-hatvalues(data.lm.after.cd)
# Press residuals
e.press <- e / (1 - h.val)
# R-student residuals
p <- k + 1
Si.sq <- ((n-p) * MS.Res - e^2/(1-h.val)) / (n-p-1)
t <- e / sqrt(Si.sq * (1 - h.val))
# Create a dataframe of all kinds of residuals
data.resids <- data.frame(e, d, e.press, t)
data.resids[1:10,]
# Plot the Normal Probability
qqnorm(data.resids$t, datax=TRUE, pch=16, cex=1, xlab="percent", ylab="R-student residual",
main = "Normal probability plot of residuals")
# Plot the residuals against the fitted values
plot(price.fit, data.resids$t, pch=20, cex=1, xlab="fitted value",
ylab="R-student residual", main = "Residual vs. fitted value plot")
lines(c(min(price.fit), max(price.fit)), c(0,0), type="l", lty=1, lwd=3)
library(dplyr)
library(readr)
# Import data
df <- read_csv("data/kc_house_data.csv")
# Select useful columns
colnames(df)
numberOfNA = length(which(is.na(df) == T))
if(numberOfNA > 0)
{
cat('Number of missing values: ', numberOfNA)
cat('\nRemoving missing values...')
df = df[complete.cases(df), ]
}
df$year <- format(as.Date(df$date, format="%m/%d/%Y"),"%Y")
df$month <-format(as.Date(df$date, format="%m/%d/%Y"),"%m")
#original model with all variables and no transformations
model.orig<-lm(price~.,data=df)
summary(model.orig)
price <- df$price
price.fit <- fitted(model.orig)
SS.Res <- sum((price - price.fit)^2)
SS.R <- sum((price.fit - mean(price))^2)
n <- nrow(df)
k <- ncol(df) - 1
F <- (SS.R / 10) / (SS.Res / (n - k - 1))
# F statistics
F
# [1] 2079.985
pf <- pf(abs(F), df1=k, df2=n-k-1, lower.tail=FALSE)
# P-value of the F statistics
pf
# [1] 0
# The model is significant
# Test on genenral linear hypothesis
MS.Res <- SS.Res / (n - k - 1)
colnames <- colnames(df)[-1]
# Generate Partial F-test on each of the variables
results <- vector("list", length(colnames))
names(results) <- colnames
for(i in 1:k){
var <- colnames[i]
data.lm.pr <- lm(price~., select(df, -var))
price.fit.pr <- fitted(model.orig)
SS.R.pr <- sum((price.fit.pr - mean(price))^2)
F0 <- (SS.R - SS.R.pr) / MS.Res
pf <- pf(abs(F0), df1=1, df2=n-k-1, lower.tail=FALSE)
result <- c(F0, pf)
names(result) <- c("F0", "p-value")
results[[var]] <- result
}
results
# Check the model adequecy
# Residuals
e <- resid(model.orig)
summary(model.orig)
# Standardized Residuals
d <- e / sqrt(MS.Res)
# Studentized residuals
r <- e / sqrt(MS.Res * (1 - h.val))
h.val<-hatvalues(model.orig)
# Studentized residuals
h.val<-hatvalues(model.orig)
r <- e / sqrt(MS.Res * (1 - h.val))
# Press residuals
e.press <- e / (1 - h.val)
# R-student residuals
p <- k + 1
Si.sq <- ((n-p) * MS.Res - e^2/(1-h.val)) / (n-p-1)
t <- e / sqrt(Si.sq * (1 - h.val))
# Create a dataframe of all kinds of residuals
data.resids <- data.frame(e, d, e.press, t)
data.resids[1:10,]
# Plot the Normal Probability
qqnorm(data.resids$t, datax=TRUE, pch=16, cex=1, xlab="percent", ylab="R-student residual",
main = "Normal probability plot of residuals")
# Plot the residuals against the fitted values
plot(price.fit, data.resids$t, pch=20, cex=1, xlab="fitted value",
ylab="R-student residual", main = "Residual vs. fitted value plot")
lines(c(min(price.fit), max(price.fit)), c(0,0), type="l", lty=1, lwd=3)
df$price =log(df$price)
df$date = NULL
df$id<-NULL
df$lat<-NULL
df$long<-NULL
df$sqft_living<-NULL
df$year<-as.factor(df$year)
df$month<-as.factor(df$month)
df$condition<-as.factor(df$condition)
df$grade<-as.factor(df$grade)
df$yr_renovated<-as.factor(df$yr_renovated)
df$yr_built<-as.factor(df$yr_built)
df$waterfront<-as.factor(df$waterfront)
df$zipcode<-as.factor(df$zipcode)
df$bedrooms<-as.factor(df$bedrooms)
#model after
data.lm <- lm(price~., df)
summary(data.lm)
View(df)
# reading data into R
df <- read.csv("data/kc_house_data.csv", stringsAsFactors = FALSE)
price.fit <- fitted(data.lm)
SS.Res <- sum((price - price.fit)^2)
SS.R <- sum((price.fit - mean(price))^2)
n <- nrow(df)
k <- ncol(df) - 1
F <- (SS.R / 10) / (SS.Res / (n - k - 1))
# F statistics
F
# [1] 1475.468
pf <- pf(abs(F), df1=k, df2=n-k-1, lower.tail=FALSE)
# P-value of the F statistics
pf
df <- read_csv("data/kc_house_data.csv")
colnames(df)
numberOfNA = length(which(is.na(df) == T))
if(numberOfNA > 0)
{
cat('Number of missing values: ', numberOfNA)
cat('\nRemoving missing values...')
df = df[complete.cases(df), ]
}
df$year <- format(as.Date(df$date, format="%m/%d/%Y"),"%Y")
df$month <-format(as.Date(df$date, format="%m/%d/%Y"),"%m")
#original model with all variables and no transformations
model.orig<-lm(price~.,data=df)
summary(model.orig)
#adjusted R^2 of 0.7023
#-------------MODEL ADEQUACY CHECKS---------------------#
price <- df$price
price.fit <- fitted(model.orig)
SS.Res <- sum((price - price.fit)^2)
SS.R <- sum((price.fit - mean(price))^2)
n <- nrow(df)
k <- ncol(df) - 1
F <- (SS.R / 10) / (SS.Res / (n - k - 1))
# F statistics
F
# [1] 2079.985
View(df)
# Import data
df <- read_csv("data/kc_house_data.csv")
df$price =log(df$price)
df$date = NULL
df$id<-NULL
df$lat<-NULL
df$long<-NULL
df$sqft_living<-NULL
df$year<-as.factor(df$year)
df$month<-as.factor(df$month)
df$condition<-as.factor(df$condition)
df$grade<-as.factor(df$grade)
df$yr_renovated<-as.factor(df$yr_renovated)
df$yr_built<-as.factor(df$yr_built)
df$waterfront<-as.factor(df$waterfront)
df$zipcode<-as.factor(df$zipcode)
df$bedrooms<-as.factor(df$bedrooms)
# Import data
df <- read_csv("data/kc_house_data.csv")
df$year <- format(as.Date(df$date, format="%m/%d/%Y"),"%Y")
df$month <-format(as.Date(df$date, format="%m/%d/%Y"),"%m")
df$price =log(df$price)
df$date = NULL
df$id<-NULL
df$lat<-NULL
df$long<-NULL
df$sqft_living<-NULL
df$year<-as.factor(df$year)
df$month<-as.factor(df$month)
df$condition<-as.factor(df$condition)
df$grade<-as.factor(df$grade)
df$yr_renovated<-as.factor(df$yr_renovated)
df$yr_built<-as.factor(df$yr_built)
df$waterfront<-as.factor(df$waterfront)
df$zipcode<-as.factor(df$zipcode)
df$bedrooms<-as.factor(df$bedrooms)
colnames(df)
df<-read_csv('data/kc_house_data.csv')
df$year <- format(as.Date(df$date, format="%m/%d/%Y"),"%Y")
df$month <-format(as.Date(df$date, format="%m/%d/%Y"),"%m")
df$price =log(df$price)
df$date = NULL
df$id<-NULL
df$lat<-NULL
df$long<-NULL
df$year<-as.factor(df$year)
df$month<-as.factor(df$month)
df$condition<-as.factor(df$condition)
df$grade<-as.factor(df$grade)
df$yr_renovated<-as.factor(df$yr_renovated)
df$yr_built<-as.factor(df$yr_built)
df$waterfront<-as.factor(df$waterfront)
df$zipcode<-as.factor(df$zipcode)
df$bedrooms<-as.factor(df$bedrooms)
y.bar <- mean(df$price)
y.cent <- df$price - y.bar
SS.T <- sum(y.cent^2)
y.scl <- y.cent / sqrt(SS.T)
x2.bar <- mean(df$sqft_living)
x2.cent <- df$sqft_living - x2.bar
S.22 <- sum(x2.cent^2)
x2.scl <- x2.cent / sqrt(S.22)
x3.bar <- mean(df$sqft_basement)
x3.cent <- df$sqft_basement- x3.bar
S.33 <- sum(x3.cent^2)
x3.scl <- x3.cent / sqrt(S.33)
x4.bar <- mean(df$sqft_living15)
x4.cent <- df$sqft_living15 - x4.bar
S.44 <- sum(x4.cent^2)
x4.scl <- x4.cent / sqrt(S.44)
x5.bar <- mean(df$sqft_lot15)
x5.cent <- df$sqft_lot15 - x5.bar
S.55 <- sum(x5.cent^2)
x5.scl <- x5.cent / sqrt(S.55)
x6.bar <- mean(df$sqft_lot)
x6.cent <- df$sqft_lot15 - x6.bar
S.66 <- sum(x6.cent^2)
x6.scl <- x6.cent / sqrt(S.66)
X.mat.scl <- as.matrix(cbind(x2.scl, x3.scl, x4.scl, x5.scl))
XpX.mat.scl <- t(X.mat.scl) %*% X.mat.scl
Xpy.mat.scl <- t(X.mat.scl) %*% y.scl
eig.out <- eigen(XpX.mat.scl)
eig.val <- eig.out$values
eig.vect <- eig.out$vectors
t=diag(eig.vect)
k=4
#VIF Values.
vif <- rep(x=0, times=k)
for (j in 1:k) {
for (i in 1:k) {
vif[j] <- vif[j] + eig.vect[j,i]^2 / eig.val[i]
}
}
vif
X.mat.scl <- as.matrix(cbind(x2.scl, x3.scl, x4.scl, x5.scl,x6.scl))
XpX.mat.scl <- t(X.mat.scl) %*% X.mat.scl
Xpy.mat.scl <- t(X.mat.scl) %*% y.scl
eig.out <- eigen(XpX.mat.scl)
eig.val <- eig.out$values
eig.vect <- eig.out$vectors
t=diag(eig.vect)
k=4
#VIF Values.
vif <- rep(x=0, times=k)
for (j in 1:k) {
for (i in 1:k) {
vif[j] <- vif[j] + eig.vect[j,i]^2 / eig.val[i]
}
}
vif
var.prop <- matrix(data=0, nrow=k, ncol=k)
for (j in 1:k) {
for (i in 1:k) {
var.prop[i,j] <- (eig.vect[j,i]^2 / eig.val[i]) / vif[j]
}
}
var.prop
single.val <- sqrt(eig.val)
single.val.max <- max(single.val)
cond.idx <- single.val.max / single.val
#conditional indices.
cond.idx
library(dplyr)
library(readr)
# Import data
df <- read_csv("data/kc_house_data.csv")
colnames(df)
numberOfNA = length(which(is.na(df) == T))
if(numberOfNA > 0)
{
cat('Number of missing values: ', numberOfNA)
cat('\nRemoving missing values...')
df = df[complete.cases(df), ]
}
df$year <- format(as.Date(df$date, format="%m/%d/%Y"),"%Y")
df$month <-format(as.Date(df$date, format="%m/%d/%Y"),"%m")
#original model with all variables and no transformations
model.orig<-lm(price~.,data=df)
summary(model.orig)
#adjusted R^2 of 0.7023
#-------------MODEL ADEQUACY CHECKS---------------------#
price <- df$price
price.fit <- fitted(model.orig)
SS.Res <- sum((price - price.fit)^2)
SS.R <- sum((price.fit - mean(price))^2)
n <- nrow(df)
k <- ncol(df) - 1
F <- (SS.R / 10) / (SS.Res / (n - k - 1))
# F statistics
F
# [1] 5222.791
pf <- pf(abs(F), df1=k, df2=n-k-1, lower.tail=FALSE)
# P-value of the F statistics
pf
# [1] 0
# The model is significant
# Test on genenral linear hypothesis
MS.Res <- SS.Res / (n - k - 1)
colnames <- colnames(df)[-1]
# Generate Partial F-test on each of the variables
results <- vector("list", length(colnames))
names(results) <- colnames
for(i in 1:k){
var <- colnames[i]
data.lm.pr <- lm(price~., select(df, -var))
price.fit.pr <- fitted(model.orig)
SS.R.pr <- sum((price.fit.pr - mean(price))^2)
F0 <- (SS.R - SS.R.pr) / MS.Res
pf <- pf(abs(F0), df1=1, df2=n-k-1, lower.tail=FALSE)
result <- c(F0, pf)
names(result) <- c("F0", "p-value")
results[[var]] <- result
}
results
# Check the model adequecy
# Residuals
e <- resid(model.orig)
# Standardized Residuals
d <- e / sqrt(MS.Res)
# Studentized residuals
h.val<-hatvalues(model.orig)
r <- e / sqrt(MS.Res * (1 - h.val))
# Press residuals
e.press <- e / (1 - h.val)
# R-student residuals
p <- k + 1
Si.sq <- ((n-p) * MS.Res - e^2/(1-h.val)) / (n-p-1)
t <- e / sqrt(Si.sq * (1 - h.val))
# Create a dataframe of all kinds of residuals
data.resids <- data.frame(e, d, e.press, t)
data.resids[1:10,]
# Plot the Normal Probability
qqnorm(data.resids$t, datax=TRUE, pch=16, cex=1, xlab="percent", ylab="R-student residual",
main = "Normal probability plot of residuals")
# The normal probablility plot is skewed
# Plot the residuals against the fitted values
plot(price.fit, data.resids$t, pch=20, cex=1, xlab="fitted value",
ylab="R-student residual", main = "Residual vs. fitted value plot")
lines(c(min(price.fit), max(price.fit)), c(0,0), type="l", lty=1, lwd=3)
# The residuals exhibit patterns and outliers
#performing transformations, removing variables and ordinalization
df$price =log(df$price)
df$date = NULL
df$id<-NULL
df$lat<-NULL
df$long<-NULL
df$sqft_living<-NULL
df$year<-as.factor(df$year)
df$month<-as.factor(df$month)
df$condition<-as.factor(df$condition)
df$grade<-as.factor(df$grade)
df$yr_renovated<-as.factor(df$yr_renovated)
df$yr_built<-as.factor(df$yr_built)
df$waterfront<-as.factor(df$waterfront)
df$zipcode<-as.factor(df$zipcode)
df$bedrooms<-as.factor(df$bedrooms)
#model after doing transformations, removing variables and converting them
data.lm <- lm(price~., df)
summary(data.lm)
# R-sq = 0.8862
price.fit <- fitted(data.lm)
SS.Res <- sum((price - price.fit)^2)
SS.R <- sum((price.fit - mean(price))^2)
n <- nrow(df)
k <- ncol(df) - 1
F <- (SS.R / 10) / (SS.Res / (n - k - 1))
# F statistics
F
# [1] 1475.468
pf <- pf(abs(F), df1=k, df2=n-k-1, lower.tail=FALSE)
# P-value of the F statistic
pf
# [1] 0
# The model is significant
#Using cook's d to check for influence points and removing them.
cook <- cooks.distance(data.lm)
# The associated cutoff value for identifying an
# influential observation is
cut.inf <- 1
#displaying influential points
df[which(cooks.distance(data.lm) > 0.1),]
influential <- as.numeric(names(cook)[(cook > 4*mean(cook, na.rm=T))])  # influential row numbers
nrow(df[influential, ])
plot(cook, pch="*", cex=2, main="Influential Obs by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cook, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cook)+1, y=cook, labels=ifelse(cook>4*mean(cook, na.rm=T),names(cook),""), col="red")  # add labels
#removing outliers from the dataset as the number of outliers is lower than 5% of the dataset
df.after.cd = df[-influential[!is.na(influential)], ]
#Create a new, final model with cleaned dataset
data.lm.after.cd<-lm(log(price)~.,data=df.after.cd)
summary(data.lm.after.cd)
